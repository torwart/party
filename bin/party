#!/usr/bin/env python

# Copyright 2014-2015 Jan Kowalewicz and contributors. All rights reserved.
# The source code is governed by an MIT X11-License which can be found
# in the root directory.

import os
import sys
import shutil
import fileinput
import argparse

class _partyfile():
	def _init():
		# creates an new partyfile
		pfile = open('partyfile.py', 'a')
		tmplt = '''#!=party

from party_plugins import PLUGIN_NAME

task def sample_task():
	pass

def runTasks():
	sample_task()
		'''
		pfile.write(tmplt)
		pfile.close()

	def _translate():
		# this function will translate an partyfile.
		# to make it faster we will create an copy of
		# the partyfile with the name _party_out.
		# the file will be translated and executed.
		shutil.copy2('partyfile.py', '_party_out.py')
		for l in fileinput.input('_party_out.py', inplace=True):
			print(l.replace('task def', 'def'), end='')
		for hl in fileinput.input('_party_out.py', inplace=True):
			print(hl.replace('#!=party', '# converted. DO NOT MODIFY!'))
		for ml in fileinput.input('_party_out.py', inplace=True):
			print(ml.replace("def runTasks():", "if __name__ == '__main__':"))
		os.system('python _party_out.py')
		os.remove('_party_out.py')

def cli():
	p = argparse.ArgumentParser(description='Python task runner')

	p.add_argument('-r', help='runs an partyfile', action='store_true')
	p.add_argument('-v', help='shows version informations', action='store_true')
	p.add_argument('-u', help='searches for newer versions of party', action='store_true')
	p.add_argument('-i', help='creates an new partyfile in the current directory', action='store_true')

	a = p.parse_args()

	if a.r:
		_partyfile._translate()

	elif a.v:
		print("party version 0.1\nyou can update by running -u")

	elif a.u:
		# WARNING: this only works for cloned repositories
		os.system("cd .. && git pull")
		# TODO: add updater for non-cloned

	elif a.i:
		_partyfile._init()

	else:
		print("you'll need to add an option.")

if __name__ == '__main__':
	try:
		cli()

	except:
		print("no partyfile found.")